{"version":3,"file":"signals-core.mjs","sources":["../src/index.ts"],"sourcesContent":["function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\nfunction mutationDetected(): never {\n\tthrow new Error(\"Computed cannot have side-effects\");\n}\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t/**\n\t\t * `signal` is a new dependency. Create a new dependency node, and set it\n\t\t * as the tail of the current context's dependency list. e.g:\n\t\t *\n\t\t * { A <-> B       }\n\t\t *         ↑     ↑\n\t\t *        tail  node (new)\n\t\t *               ↓\n\t\t * { A <-> B <-> C }\n\t\t *               ↑\n\t\t *              tail (evalContext._sources)\n\t\t */\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: evalContext._sources,\n\t\t\t_nextSource: undefined,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\n\t\tif (evalContext._sources !== undefined) {\n\t\t\tevalContext._sources._nextSource = node;\n\t\t}\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t/**\n\t\t * If `node` is not already the current tail of the dependency list (i.e.\n\t\t * there is a next node in the list), then make the `node` the new tail. e.g:\n\t\t *\n\t\t * { A <-> B <-> C <-> D }\n\t\t *         ↑           ↑\n\t\t *        node   ┌─── tail (evalContext._sources)\n\t\t *         └─────│─────┐\n\t\t *               ↓     ↓\n\t\t * { A <-> C <-> D <-> B }\n\t\t *                     ↑\n\t\t *                    tail (evalContext._sources)\n\t\t */\n\t\tif (node._nextSource !== undefined) {\n\t\t\tnode._nextSource._prevSource = node._prevSource;\n\n\t\t\tif (node._prevSource !== undefined) {\n\t\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\t}\n\n\t\t\tnode._prevSource = evalContext._sources;\n\t\t\tnode._nextSource = undefined;\n\n\t\t\tevalContext._sources!._nextSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\n// @ts-ignore internal Signal is viewed as a function\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/**\n\t * @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable nodes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\ttoJSON(): T;\n\n\tpeek(): T;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\n// @ts-ignore internal Signal is viewed as function\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (this._targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = this._targets;\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the signal has any subscribers to begin with.\n\tif (this._targets !== undefined) {\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.toJSON = function () {\n\treturn this.value;\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(this: Signal, value) {\n\t\tif (evalContext instanceof Computed) {\n\t\t\tmutationDetected();\n\t\t}\n\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\t/**\n\t * 1. Mark all current sources as re-usable nodes (version: -1)\n\t * 2. Set a rollback node if the current node is being used in a different context\n\t * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n\t *\n\t *    { undefined <- A <-> B <-> C -> undefined }\n\t *                   ↑           ↑\n\t *                   │           └──────┐\n\t * target._sources = A; (node is head)  │\n\t *                   ↓                  │\n\t * target._sources = C; (node is tail) ─┘\n\t */\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\n\t\tif (node._nextSource === undefined) {\n\t\t\ttarget._sources = node;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\tlet node = target._sources;\n\tlet head = undefined;\n\n\t/**\n\t * At this point 'target._sources' points to the tail of the doubly-linked list.\n\t * It contains all existing sources + new sources in order of use.\n\t * Iterate backwards until we find the head node while dropping old dependencies.\n\t */\n\twhile (node !== undefined) {\n\t\tconst prev = node._prevSource;\n\n\t\t/**\n\t\t * The node was not re-used, unsubscribe from its change notifications and remove itself\n\t\t * from the doubly-linked list. e.g:\n\t\t *\n\t\t * { A <-> B <-> C }\n\t\t *         ↓\n\t\t *    { A <-> C }\n\t\t */\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = node._nextSource;\n\t\t\t}\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = prev;\n\t\t\t}\n\t\t} else {\n\t\t\t/**\n\t\t\t * The new head is the last node seen which wasn't removed/unsubscribed\n\t\t\t * from the doubly-linked list. e.g:\n\t\t\t *\n\t\t\t * { A <-> B <-> C }\n\t\t\t *   ↑     ↑     ↑\n\t\t\t *   │     │     └ head = node\n\t\t\t *   │     └ head = node\n\t\t\t *   └ head = node\n\t\t\t */\n\t\t\thead = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\n\t\tnode = prev;\n\t}\n\n\ttarget._sources = head;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the computed signal has any subscribers.\n\tif (this._targets !== undefined) {\n\t\tSignal.prototype._unsubscribe.call(this, node);\n\n\t\t// Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n\t\t// This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n\t\tif (this._targets === undefined) {\n\t\t\tthis._flags &= ~TRACKING;\n\n\t\t\tfor (\n\t\t\t\tlet node = this._sources;\n\t\t\t\tnode !== undefined;\n\t\t\t\tnode = node._nextSource\n\t\t\t) {\n\t\t\t\tnode._source._unsubscribe(node);\n\t\t\t}\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ndeclare class Effect {\n\t_compute?: () => void | (() => void);\n\t_cleanup?: () => void;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => void | (() => void));\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => void | (() => void)) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (this._flags & DISPOSED) return;\n\t\tif (this._compute === undefined) return;\n\n\t\tconst cleanup = this._compute();\n\t\tif (typeof cleanup === \"function\") {\n\t\t\tthis._cleanup = cleanup;\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => void | (() => void)): () => void {\n\tconst effect = new Effect(compute);\n\ttry {\n\t\teffect._callback();\n\t} catch (err) {\n\t\teffect._dispose();\n\t\tthrow err;\n\t}\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport { signal, computed, effect, batch, Signal, type ReadonlySignal };\n"],"names":["cycleDetected","Error","endBatch","batchDepth","error","hasError","undefined","batchedEffect","batchIteration","effect","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","batch","callback","evalContext","globalVersion","addDependency","signal","node","_node","_target","_version","_source","_prevSource","_sources","_nextSource","_prevTarget","_nextTarget","_rollbackNode","_subscribe","Signal","value","this","_value","_targets","prototype","_refresh","_unsubscribe","prev","subscribe","fn","flag","valueOf","toString","toJSON","peek","Object","defineProperty","get","set","Computed","mutationDetected","_notify","target","prepareSources","rollbackNode","cleanupSources","head","compute","call","_compute","_globalVersion","OUTDATED","prevContext","_node2","computed","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","_dispose"],"mappings":"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"}